CLASS:: MOTOR
SUMMARY:: Behringer MOTÖR49/61 USB MIDI Keyboard controller proxy
CATEGORIES:: External Control>MIDI
RELATED:: Classes/MIDIOut

DESCRIPTION::
A class for working with a Behringer MOTÖR49/61 USB MIDI Keyboard controller.
This device has 9 motorized faders (4 banks of 8 + 1), 4 banks of 8 encoders,
4 banks of 8 drum pads and a keyboard.  The motorized faders respond
to MIDI control messages.  With this class, you can easily bind functions
to particular controls on a MOTÖR.

CLASSMETHODS::

METHOD:: new

Construct or update an existing instance.

ARGUMENT:: type
The type of control

ARGUMENT:: num
The label of the control

ARGUMENT:: spec
A LINK::Classes/ControlSpec:: which is used to translate the actual MIDI value to a desired range

ARGUMENT:: function
A function to invoke when the control emits MIDI data.
First argument will be the translated value, second argument the message number, and third argument is the instance from which the event originated

ARGUMENT:: single
If true, don't filter out events which result in the same value

SUBSECTION:: Convenience methods

METHOD:: fader

Construct or retrieve a fader instance.

ARGUMENT:: name
The symbol CODE::\master:: or a number between 1 and 32

METHOD:: encoder

Construct or retrieve an encoder instance.

ARGUMENT:: name
A number between 1 and 32

METHOD:: button

Construct or retrieve an instance for a transport button.

ARGUMENT:: name
One of the symbols CODE::\backward::, CODE::\forward::, CODE::\stop::, CODE::\play::, CODE::\loop:: or CODE::\record.

METHOD:: backward

Construct or retrieve an instance for the backward button.

METHOD:: forward

Construct or retrieve an instance for the forward button.

METHOD:: stop

Construct or retrieve an instance for the stop button.

METHOD:: play

Construct or retrieve an instance for the play button.

METHOD:: loop

Construct or retrieve an instance for the loop button.

METHOD:: record

Construct or retrieve an instance for the record button.

METHOD:: padOn

Construct or retrieve and instance of a drum pad.

ARGUMENT:: name
A number between 1 and 32

METHOD:: padOff

Construct or retireve an instance for when a drumpad is released

METHOD:: noteOn

Construct or retireve an instance of a keyboard TELETYPE::noteOn:: event

ARGUMENT:: spec
Specifies how to translate the velocity

METHOD:: noteOff

Construct or retrieve a keyboard TELETYPE::noteOff:: event.

EXAMPLES::

Initialise on a Linux system.

CODE::
MIDIClient.init(verbose: false);
MIDIIn.connectAll;
MIDIClient.destinations.detectIndex {|ep|
	ep.device == "MOTÖR49 Keyboard" and: ep.name == "MOTÖR49 Keyboard MIDI 1"
} !? {|index|
	MOTOR.midiOut = MIDIOut(0).connect(index);
	MOTOR.fader(\master, \db, s.volume = _).value = s.volume.volume;
	MOTOR.stop({ thisProcess.stop });
	MOTOR.play({ thisProcess.run });
	MOTOR.record({ if(s.isRecording, { s.stopRecording }, { s.record }) });
};
::

Basic keyboard.

CODE::
(
~notes = Array.newClear(128);
MOTOR.noteOn(\unipolar, {|amp, num|
	~notes[num] = Synth(\default,
		[\freq, num.midicps, \amp, amp]
	)
});
MOTOR.noteOff({|vel, num| ~notes[num].set(\gate, 0) });
)
::

Use the faders to "draw" sin, cos and tan functions.

CODE::
(
var faders, resolution, offset, draw;
faders = Array.fill(24, {|i| MOTOR.fader(i+1, \bipolar) });
resolution = MOTOR.encoder(1, [8, 8+128, \lin, 1], {
	offset.spec = [
		0, resolution.value-8, \lin,
		1, min(offset.value, resolution.value-8)
	];
	draw.value
});
draw = {
	#[\sin, \cos, \tan].do{|f, i|
		8.do {|j|
			faders[(i*8)+j].value = (pi*2/(resolution.value-1)*(j+offset.value)).perform(f)
		}
	}
};
offset = MOTOR.encoder(2, [0, resolution.value-8, \lin, 1], {
	draw.value
});
draw.value
)
::
